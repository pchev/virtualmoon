unit uPSI_GLStrings;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_GLStrings = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_GLStrings(CL: TPSPascalCompiler);

{ run-time registration functions }

procedure Register;

implementation


uses
   GLStrings
  ;
 
 
procedure Register;
begin
  RegisterComponents('GLS ROPS', [TPSImport_GLStrings]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_GLStrings(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('glsDot','String').SetString( '.');
 CL.AddConstantN('glsError','String').SetString( 'Error!');
 CL.AddConstantN('glsErrorEx','String').SetString( 'Error: ');
 CL.AddConstantN('glsNoRenderingContext','String').SetString( 'Could not create a rendering context');
 CL.AddConstantN('glsWrongVersion','String').SetString( 'Need at least OpenGL version 1.1');
 CL.AddConstantN('glsTooManyLights','String').SetString( 'Too many lights in the scene');
 CL.AddConstantN('glsDisplayList','String').SetString( 'Failed to create a new display list for object ''%s''');
 CL.AddConstantN('glsWrongBitmapCanvas','String').SetString( 'Couldn''t create a rendering context for the given bitmap');
 CL.AddConstantN('glsWrongPrinter','String').SetString( 'Couldn''t render to printer');
 CL.AddConstantN('glsAlreadyRendering','String').SetString( 'Already rendering');
 CL.AddConstantN('glsSceneViewerNotDefined','String').SetString( glsErrorEx + 'SceneViewer not defined!');
 CL.AddConstantN('glsCadencerNotDefined','String').SetString( glsErrorEx + 'Cadencer not defined!');
 CL.AddConstantN('glsCadencerNotDefinedEx','String').SetString( glsErrorEx + 'Cadencer not defined for  the ''%s'' component');
 CL.AddConstantN('glsShaderNeedsAtLeastOneLightSource','String').SetString( glsErrorEx + 'This shader needs at least one LightSource!');
 CL.AddConstantN('glsShaderNeedsAtLeastOneLightSourceEx','String').SetString( glsErrorEx + 'Shader ''%s'' needs at least one LightSource!');
 CL.AddConstantN('glsSceneRoot','String').SetString( 'Scene root');
 CL.AddConstantN('glsObjectRoot','String').SetString( 'Scene objects');
 CL.AddConstantN('glsCameraRoot','String').SetString( 'Cameras');
 CL.AddConstantN('glsCamera','String').SetString( 'Camera');
 CL.AddConstantN('glsImageInvalid','String').SetString( 'Could not load texture, image is invalid');
 CL.AddConstantN('glsNoNewTexture','String').SetString( 'Could not get new texture name');
 CL.AddConstantN('glsMatLibNotDefined','String').SetString( glsErrorEx + 'Material Library not defined!');
 CL.AddConstantN('glsMaterialNotFoundInMatlib','String').SetString( glsErrorEx + 'Material not found in current Material Library!');
 CL.AddConstantN('glsMaterialNotFoundInMatlibEx','String').SetString( glsErrorEx + 'Material "%s" not found in current Material Library!');
 CL.AddConstantN('glsSphereTopBottom','String').SetString( 'The top angle must be higher than the bottom angle');
 CL.AddConstantN('glsSphereStartStop','String').SetString( 'The start angle must be smaller than then stop angle');
 CL.AddConstantN('glsMaterialNotFound','String').SetString( 'Loading failed: could not find material %s');
 CL.AddConstantN('glsInterleaveNotSupported','String').SetString( 'Interleaved Array format not supported yet. Sorry.');
 CL.AddConstantN('glsOutOfMemory','String').SetString( 'Fatal: Out of memory');
 CL.AddConstantN('glsFailedOpenFile','String').SetString( 'Could not open file: %s');
 CL.AddConstantN('glsNoDescriptionAvailable','String').SetString( 'No description available');
 CL.AddConstantN('glsUnBalancedBeginEndUpdate','String').SetString( 'Unbalanced Begin/EndUpdate');
 CL.AddConstantN('glsUnknownExtension','String').SetString( 'Unknown file extension (%s), maybe you forgot to add the support ' + 'unit to your uses? (%s?)');
 CL.AddConstantN('glsUncompatibleTypes','String').SetString( glsErrorEx + 'uncompatible types!');
 CL.AddConstantN('glsUnknownType','String').SetString( glsErrorEx + 'unknown type!');
 CL.AddConstantN('glsUnsupportedType','String').SetString( glsErrorEx + 'unsupported type!');
 CL.AddConstantN('glsOCBasicGeometry','String').SetString( 'Basic geometry');
 CL.AddConstantN('glsOCAdvancedGeometry','String').SetString( 'Advanced geometry');
 CL.AddConstantN('glsOCMeshObjects','String').SetString( 'Mesh objects');
 CL.AddConstantN('glsOCParticleSystems','String').SetString( 'Particle systems');
 CL.AddConstantN('glsOCEnvironmentObjects','String').SetString( 'Environment objects');
 CL.AddConstantN('glsOCSpecialObjects','String').SetString( 'Special objects');
 CL.AddConstantN('glsOCGraphPlottingObjects','String').SetString( 'Graph-plotting objects');
 CL.AddConstantN('glsOCDoodad','String').SetString( 'Doodad objects');
 CL.AddConstantN('glsOCHUDObjects','String').SetString( 'HUD objects');
 CL.AddConstantN('glsOCGuiObjects','String').SetString( 'GUI objects');
 CL.AddConstantN('glsOCProxyObjects','String').SetString( 'Proxy objects');
end;

(* === run-time registration functions === *)
 
 
{ TPSImport_GLStrings }
(*----------------------------------------------------------------------------*)
procedure TPSImport_GLStrings.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_GLStrings(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_GLStrings.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
//  RIRegister_GLStrings(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
